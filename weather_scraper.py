from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium.webdriver.chrome.options import Options
import logging


#   –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# -------------------------------
logging.basicConfig(
    level=logging.INFO,                  
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="scraper.log",
    filemode="a"
)


def get_weather_info() -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ —É –í—Ä–æ—Ü–ª–∞–≤—ñ.
    –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä –∞–±–æ –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    logging.info("get_weather_info(): Launching ChromeDriver in headless mode")

    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    try:
        driver = webdriver.Chrome(options=options)
    except WebDriverException as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ ChromeDriver: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä."

    try:
        url = "https://www.timeanddate.com/weather/poland/wroclaw"
        driver.get(url)
        logging.info("Loaded page: " + url)

        # –û—á—ñ–∫—É—î–º–æ, –ø–æ–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è –±–ª–æ–∫ —ñ–∑ —à–≤–∏–¥–∫–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ–≥–æ–¥—É
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "bk-focus__qlook"))
        )

        # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (–µ–ª–µ–º–µ–Ω—Ç –∑ –∫–ª–∞—Å–æ–º "h2" –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±–ª–æ–∫–∞ qlook)
        temp_elem = driver.find_element(By.CSS_SELECTOR, ".bk-focus__qlook .h2")
        temperature = temp_elem.text.strip()  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "23 ¬∞C"

        # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (–ø–µ—Ä—à–∏–π <p> –≤ –±–ª–æ—Ü—ñ .bk-focus__qlook)
        condition_elem = driver.find_element(By.CSS_SELECTOR, ".bk-focus__qlook")
        description = condition_elem.find_element(By.TAG_NAME, "p").text.strip()

        weather_text = (
            f"üå§Ô∏è <b>Today in Wroclaw</b>\n"
            f"Temperature: {temperature}\n"
            f"{description}"
        )
        logging.info(f"get_weather_info(): Extracted -> {weather_text}")
        return weather_text

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É."

    finally:
        driver.quit()


def get_weather_forecast_14days() -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å 14-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ —É –í—Ä–æ—Ü–ª–∞–≤—ñ
    —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–µ—Ç–∞–ª—ñ –≤ forecast_14days.csv.
    """
    logging.info("get_weather_forecast_14days(): Launching ChromeDriver in headless mode")

    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    try:
        driver = webdriver.Chrome(options=options)
    except WebDriverException as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ ChromeDriver: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä."

    try:
        url = "https://www.timeanddate.com/weather/poland/wroclaw/ext"
        driver.get(url)
        logging.info("Loaded page: " + url)

        # –û—á—ñ–∫—É—î–º–æ, –ø–æ–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è 14-–¥–µ–Ω–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º
        table = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "zebra.tb-wt"))
        )

        rows = table.find_elements(By.TAG_NAME, "tr")
        forecast_text = "<b>üìÜ 14-Day Weather Forecast for Wroclaw:</b>\n\n"
        data_rows = []

        for i, row in enumerate(rows[1:], 1):  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                cols = row.find_elements(By.TAG_NAME, "td")
                if len(cols) >= 8:
                    day = cols[0].text.strip()        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "Fri  6 Jun"
                    temp = cols[1].text.strip()       # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "23 / 15 ¬∞C"
                    weather = cols[2].text.strip()    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "Sunny"
                    feels = cols[3].text.strip()      # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "Feels Like 20 ¬∞C"
                    wind = cols[4].text.strip()       # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "7 km/h"
                    humidity = cols[5].text.strip()   # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "60 %"
                    chance = cols[6].text.strip()     # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "10 %"
                    amount = cols[7].text.strip()     # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "0 mm"

                    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ä—è–¥–æ–∫
                    forecast_text += (
                        f"üìÖ {day}: {temp}, {weather}, {feels}, Wind {wind}\n"
                        f"   Humidity: {humidity}, Rain chance: {chance}, Amount: {amount}\n\n"
                    )

                    data_rows.append([
                        day, temp, weather, feels, wind,
                        humidity, chance, amount
                    ])
            except Exception as e:
                logging.error(f"[Row {i}] Error processing row: {e}")
                continue

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É CSV
        import pandas as pd
        columns = [
            "–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ü–æ–≥–æ–¥–∞", "–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫", "–í—ñ—Ç–µ—Ä",
            "–í–æ–ª–æ–≥—ñ—Å—Ç—å", "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤"
        ]
        df = pd.DataFrame(data_rows, columns=columns)
        df.to_csv("forecast_14days.csv", index=False, encoding="utf-8")
        logging.info("get_weather_forecast_14days(): Saved forecast_14days.csv")

        return forecast_text

    except TimeoutException as e:
        logging.error("Timeout waiting for 14-day forecast table")
        return "‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 14 –¥–Ω—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç."

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ 14-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ 14-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑."

    finally:
        driver.quit()
